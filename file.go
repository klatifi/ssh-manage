package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"text/template"

	"github.com/peterbourgon/diskv"
)

const configuration = `
# This file was created by ssh-manage tool
# Do not edit this file manually, any changes will be lost

{{ range . }}
# Configuration for {{ .Nickname }}
Host {{ .Name }}
    Hostname {{ .IP }}
    Port {{ .Port }}
    User {{ .User }}
    IdentityFile {{ .Key }}
    ServerKeepAlive {{ .KeepAlive }}

{{ end }}
`

func writeFile(d *diskv.Diskv) error {
	var h []Host
	keyChan := d.Keys()
	for key := range keyChan {
		val, err := d.Read(key)
		if err != nil {
		        logHandler("DEBUG", fmt.Sprintf("error reading data store: %v", err))
			return err
		}

		var t Host
		err = json.Unmarshal(val, &t)
		if err != nil {
		        logHandler("DEBUG", fmt.Sprintf("error parsing JSON: %v", err))
			return err
		}
		h = append(h, t)
	}

	home, err := getHome()
	if err != nil {
	        logHandler("DEBUG", fmt.Sprintf("error geting home directory: %v", err))
		return errors.New("failed to get vaild home directory")
	}

	configFile := home + "/.ssh/config"
	fo, err := os.Create(configFile)
	if err != nil {
	        logHandler("DEBUG", fmt.Sprintf("error writing file: %v", err))
		return errors.New("could not write SSH configuration file")
	}

	temp := template.Must(template.New("configuration").Parse(configuration))
	err = temp.Execute(fo, h)
	if err != nil {
	        logHandler("DEBUG", fmt.Sprintf("error parsing template file: %v", err))
		return err
	}

	err = fo.Close()
	if err != nil {
	        logHandler("DEBUG", fmt.Sprintf("error writing file: %v", err))
		return errors.New("could not close SSH configuration file")
	}
	return nil
}
